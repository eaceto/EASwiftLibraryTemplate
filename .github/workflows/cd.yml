name: CD

on:
  push:
  pull_request:
    branches: [main]
    paths:
      - "definitions.json"
      - "Package.*"
  workflow_dispatch:

jobs:
  build:
    name: Release a new version
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: swift-actions/setup-swift@v1
        with:
          swift-version: 5.6

      - name: Install Dependencies
        run: |
          brew install lcov

      - name: Get package name ## This assumes 1 package in this library
        id: get_package
        run: |
          LIBRARY_NAME=$(swift package describe | grep 'Name: ' | grep -v 'Tests' | awk '{print $2}' | head -n 1)
          echo "::set-output name=name::$(echo $LIBRARY_NAME)"
          V_SPM=$(grep "^let libraryVersion" Package.swift | sed -E "s/let libraryVersion.*\"(.*)\"/\1/g")
          V_POD=$(cat definitions.json | python3 -c "import json,sys;obj=json.load(sys.stdin);print(obj['version']);")
          if ["$V_SPM" != "$V_POD"]; then
            echo "Version declared in 'definitions.json' does not match version in 'Package.swift'"
            exit 1
          fi
          echo "::set-output name=LIBRARY_VERSION::$(echo $V_SPM)"
          DOCS_GENERATOR=$(cat definitions.json | python3 -c "import json,sys;obj=json.load(sys.stdin);print(obj['docs_generator']);")
          echo "::set-output name=DOCS_GENERATOR::$(echo $DOCS_GENERATOR)"

      - name: Create source code documentation with DocC
        if: ${{ steps.get_package.outputs.DOCS_GENERATOR == 'docc' }}
        run: |
          export DOCC_JSON_PRETTYPRINT="YES"
          swift package --allow-writing-to-directory docs/docc generate-documentation --target "$LIBRARY_NAME" --fallback-display-name "$LIBRARY_NAME" --fallback-bundle-identifier "$LIBRARY_NAME" --bundle-version "$LIBRARY_VERSION" --transform-for-static-hosting --enable-inherited-docs --hosting-base-path "$LIBRARY_NAME/docc" --output-path docs/docc
        env:
          LIBRARY_NAME: ${{ steps.get_package.outputs.LIBRARY_NAME  }}
          LIBRARY_VERSION: ${{ steps.get_package.outputs.LIBRARY_VERSION  }}
          DOCS_GENERATOR: ${{ steps.get_package.outputs.DOCS_GENERATOR  }}

      - name: Create source code documentation with Jazzy
        if: ${{ steps.get_package.outputs.DOCS_GENERATOR != 'docc' }}
        uses: sersoft-gmbh/swifty-docs-action@v1
        with:
          source: ${{ github.workspace }}
          output: docs/jazzy
          module: ${{ steps.get_package.outputs.LIBRARY_NAME }}
          module-version: ${{ steps.get_package.outputs.LIBRARY_VERSION }}
          clean: true
        env:
          DOCS_GENERATOR: ${{ steps.get_package.outputs.DOCS_GENERATOR  }}

      - name: Publish source code documentation
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Updated source code docs

      - name: Create quality reports
        run: |
          swift package clean
          swift test --enable-code-coverage --build-path .build/coverage-build
          ./scripts/gen-lcov-report.sh
          mkdir -p docs/swiftlint
          swiftlint lint --quiet --reporter html > docs/swiftlint/index.html

      - name: Publish quality reports
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Updated coverage reports

      - name: Create iOS XCFramework
        run: |
          ./scripts/create-ios-xcframework.sh

      - name: Create a release/tag from this version
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_package.outputs.LIBRARY_VERSION }}
          release_name: Version ${{ steps.get_package.outputs.LIBRARY_VERSION }}
          body: "PRs in release: ${{ steps.build_changelog.outputs.pull_requests }}\n${{ steps.build_changelog.outputs.changelog }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-framework
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./Build/xcframeworks/ios-library.xcframework.zip
          asset_name: ios-library.xcframework.zip
          asset_content_type: application/zip
